%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MICSFT/PC/CP858.TXT AT 2021-07-08
-module(cp858).
-vsn(20210708).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#00c7;
to_unicode(16#81) -> 16#00fc;
to_unicode(16#82) -> 16#00e9;
to_unicode(16#83) -> 16#00e2;
to_unicode(16#84) -> 16#00e4;
to_unicode(16#85) -> 16#00e0;
to_unicode(16#86) -> 16#00e5;
to_unicode(16#87) -> 16#00e7;
to_unicode(16#88) -> 16#00ea;
to_unicode(16#89) -> 16#00eb;
to_unicode(16#8a) -> 16#00e8;
to_unicode(16#8b) -> 16#00ef;
to_unicode(16#8c) -> 16#00ee;
to_unicode(16#8d) -> 16#00ec;
to_unicode(16#8e) -> 16#00c4;
to_unicode(16#8f) -> 16#00c5;
to_unicode(16#90) -> 16#00c9;
to_unicode(16#91) -> 16#00e6;
to_unicode(16#92) -> 16#00c6;
to_unicode(16#93) -> 16#00f4;
to_unicode(16#94) -> 16#00f6;
to_unicode(16#95) -> 16#00f2;
to_unicode(16#96) -> 16#00fb;
to_unicode(16#97) -> 16#00f9;
to_unicode(16#98) -> 16#00ff;
to_unicode(16#99) -> 16#00d6;
to_unicode(16#9a) -> 16#00dc;
to_unicode(16#9b) -> 16#00f8;
to_unicode(16#9c) -> 16#00a3;
to_unicode(16#9d) -> 16#00d8;
to_unicode(16#9e) -> 16#00d7;
to_unicode(16#9f) -> 16#0192;
to_unicode(16#a0) -> 16#00e1;
to_unicode(16#a1) -> 16#00ed;
to_unicode(16#a2) -> 16#00f3;
to_unicode(16#a3) -> 16#00fa;
to_unicode(16#a4) -> 16#00f1;
to_unicode(16#a5) -> 16#00d1;
to_unicode(16#a6) -> 16#00aa;
to_unicode(16#a7) -> 16#00ba;
to_unicode(16#a8) -> 16#00bf;
to_unicode(16#a9) -> 16#00ae;
to_unicode(16#aa) -> 16#00ac;
to_unicode(16#ab) -> 16#00bd;
to_unicode(16#ac) -> 16#00bc;
to_unicode(16#ad) -> 16#00a1;
to_unicode(16#ae) -> 16#00ab;
to_unicode(16#af) -> 16#00bb;
to_unicode(16#b0) -> 16#2591;
to_unicode(16#b1) -> 16#2592;
to_unicode(16#b2) -> 16#2593;
to_unicode(16#b3) -> 16#2502;
to_unicode(16#b4) -> 16#2524;
to_unicode(16#b5) -> 16#00c1;
to_unicode(16#b6) -> 16#00c2;
to_unicode(16#b7) -> 16#00c0;
to_unicode(16#b8) -> 16#00a9;
to_unicode(16#b9) -> 16#2563;
to_unicode(16#ba) -> 16#2551;
to_unicode(16#bb) -> 16#2557;
to_unicode(16#bc) -> 16#255d;
to_unicode(16#bd) -> 16#00a2;
to_unicode(16#be) -> 16#00a5;
to_unicode(16#bf) -> 16#2510;
to_unicode(16#c0) -> 16#2514;
to_unicode(16#c1) -> 16#2534;
to_unicode(16#c2) -> 16#252c;
to_unicode(16#c3) -> 16#251c;
to_unicode(16#c4) -> 16#2500;
to_unicode(16#c5) -> 16#253c;
to_unicode(16#c6) -> 16#00e3;
to_unicode(16#c7) -> 16#00c3;
to_unicode(16#c8) -> 16#255a;
to_unicode(16#c9) -> 16#2554;
to_unicode(16#ca) -> 16#2569;
to_unicode(16#cb) -> 16#2566;
to_unicode(16#cc) -> 16#2560;
to_unicode(16#cd) -> 16#2550;
to_unicode(16#ce) -> 16#256c;
to_unicode(16#cf) -> 16#00a4;
to_unicode(16#d0) -> 16#00f0;
to_unicode(16#d1) -> 16#00d0;
to_unicode(16#d2) -> 16#00ca;
to_unicode(16#d3) -> 16#00cb;
to_unicode(16#d4) -> 16#00c8;
to_unicode(16#d5) -> 16#20ac;
to_unicode(16#d6) -> 16#00cd;
to_unicode(16#d7) -> 16#00ce;
to_unicode(16#d8) -> 16#00cf;
to_unicode(16#d9) -> 16#2518;
to_unicode(16#da) -> 16#250c;
to_unicode(16#db) -> 16#2588;
to_unicode(16#dc) -> 16#2584;
to_unicode(16#dd) -> 16#00a6;
to_unicode(16#de) -> 16#00cc;
to_unicode(16#df) -> 16#2580;
to_unicode(16#e0) -> 16#00d3;
to_unicode(16#e1) -> 16#00df;
to_unicode(16#e2) -> 16#00d4;
to_unicode(16#e3) -> 16#00d2;
to_unicode(16#e4) -> 16#00f5;
to_unicode(16#e5) -> 16#00d5;
to_unicode(16#e6) -> 16#00b5;
to_unicode(16#e7) -> 16#00fe;
to_unicode(16#e8) -> 16#00de;
to_unicode(16#e9) -> 16#00da;
to_unicode(16#ea) -> 16#00db;
to_unicode(16#eb) -> 16#00d9;
to_unicode(16#ec) -> 16#00fd;
to_unicode(16#ed) -> 16#00dd;
to_unicode(16#ee) -> 16#00af;
to_unicode(16#ef) -> 16#00b4;
to_unicode(16#f0) -> 16#00ad;
to_unicode(16#f1) -> 16#00b1;
to_unicode(16#f2) -> 16#2017;
to_unicode(16#f3) -> 16#00be;
to_unicode(16#f4) -> 16#00b6;
to_unicode(16#f5) -> 16#00a7;
to_unicode(16#f6) -> 16#00f7;
to_unicode(16#f7) -> 16#00b8;
to_unicode(16#f8) -> 16#00b0;
to_unicode(16#f9) -> 16#00a8;
to_unicode(16#fa) -> 16#00b7;
to_unicode(16#fb) -> 16#00b9;
to_unicode(16#fc) -> 16#00b3;
to_unicode(16#fd) -> 16#00b2;
to_unicode(16#fe) -> 16#25a0;
to_unicode(16#ff) -> 16#00a0;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#00c7) -> 16#80;
from_unicode(16#00fc) -> 16#81;
from_unicode(16#00e9) -> 16#82;
from_unicode(16#00e2) -> 16#83;
from_unicode(16#00e4) -> 16#84;
from_unicode(16#00e0) -> 16#85;
from_unicode(16#00e5) -> 16#86;
from_unicode(16#00e7) -> 16#87;
from_unicode(16#00ea) -> 16#88;
from_unicode(16#00eb) -> 16#89;
from_unicode(16#00e8) -> 16#8a;
from_unicode(16#00ef) -> 16#8b;
from_unicode(16#00ee) -> 16#8c;
from_unicode(16#00ec) -> 16#8d;
from_unicode(16#00c4) -> 16#8e;
from_unicode(16#00c5) -> 16#8f;
from_unicode(16#00c9) -> 16#90;
from_unicode(16#00e6) -> 16#91;
from_unicode(16#00c6) -> 16#92;
from_unicode(16#00f4) -> 16#93;
from_unicode(16#00f6) -> 16#94;
from_unicode(16#00f2) -> 16#95;
from_unicode(16#00fb) -> 16#96;
from_unicode(16#00f9) -> 16#97;
from_unicode(16#00ff) -> 16#98;
from_unicode(16#00d6) -> 16#99;
from_unicode(16#00dc) -> 16#9a;
from_unicode(16#00f8) -> 16#9b;
from_unicode(16#00a3) -> 16#9c;
from_unicode(16#00d8) -> 16#9d;
from_unicode(16#00d7) -> 16#9e;
from_unicode(16#0192) -> 16#9f;
from_unicode(16#00e1) -> 16#a0;
from_unicode(16#00ed) -> 16#a1;
from_unicode(16#00f3) -> 16#a2;
from_unicode(16#00fa) -> 16#a3;
from_unicode(16#00f1) -> 16#a4;
from_unicode(16#00d1) -> 16#a5;
from_unicode(16#00aa) -> 16#a6;
from_unicode(16#00ba) -> 16#a7;
from_unicode(16#00bf) -> 16#a8;
from_unicode(16#00ae) -> 16#a9;
from_unicode(16#00ac) -> 16#aa;
from_unicode(16#00bd) -> 16#ab;
from_unicode(16#00bc) -> 16#ac;
from_unicode(16#00a1) -> 16#ad;
from_unicode(16#00ab) -> 16#ae;
from_unicode(16#00bb) -> 16#af;
from_unicode(16#2591) -> 16#b0;
from_unicode(16#2592) -> 16#b1;
from_unicode(16#2593) -> 16#b2;
from_unicode(16#2502) -> 16#b3;
from_unicode(16#2524) -> 16#b4;
from_unicode(16#00c1) -> 16#b5;
from_unicode(16#00c2) -> 16#b6;
from_unicode(16#00c0) -> 16#b7;
from_unicode(16#00a9) -> 16#b8;
from_unicode(16#2563) -> 16#b9;
from_unicode(16#2551) -> 16#ba;
from_unicode(16#2557) -> 16#bb;
from_unicode(16#255d) -> 16#bc;
from_unicode(16#00a2) -> 16#bd;
from_unicode(16#00a5) -> 16#be;
from_unicode(16#2510) -> 16#bf;
from_unicode(16#2514) -> 16#c0;
from_unicode(16#2534) -> 16#c1;
from_unicode(16#252c) -> 16#c2;
from_unicode(16#251c) -> 16#c3;
from_unicode(16#2500) -> 16#c4;
from_unicode(16#253c) -> 16#c5;
from_unicode(16#00e3) -> 16#c6;
from_unicode(16#00c3) -> 16#c7;
from_unicode(16#255a) -> 16#c8;
from_unicode(16#2554) -> 16#c9;
from_unicode(16#2569) -> 16#ca;
from_unicode(16#2566) -> 16#cb;
from_unicode(16#2560) -> 16#cc;
from_unicode(16#2550) -> 16#cd;
from_unicode(16#256c) -> 16#ce;
from_unicode(16#00a4) -> 16#cf;
from_unicode(16#00f0) -> 16#d0;
from_unicode(16#00d0) -> 16#d1;
from_unicode(16#00ca) -> 16#d2;
from_unicode(16#00cb) -> 16#d3;
from_unicode(16#00c8) -> 16#d4;
from_unicode(16#20ac) -> 16#d5;
from_unicode(16#00cd) -> 16#d6;
from_unicode(16#00ce) -> 16#d7;
from_unicode(16#00cf) -> 16#d8;
from_unicode(16#2518) -> 16#d9;
from_unicode(16#250c) -> 16#da;
from_unicode(16#2588) -> 16#db;
from_unicode(16#2584) -> 16#dc;
from_unicode(16#00a6) -> 16#dd;
from_unicode(16#00cc) -> 16#de;
from_unicode(16#2580) -> 16#df;
from_unicode(16#00d3) -> 16#e0;
from_unicode(16#00df) -> 16#e1;
from_unicode(16#00d4) -> 16#e2;
from_unicode(16#00d2) -> 16#e3;
from_unicode(16#00f5) -> 16#e4;
from_unicode(16#00d5) -> 16#e5;
from_unicode(16#00b5) -> 16#e6;
from_unicode(16#00fe) -> 16#e7;
from_unicode(16#00de) -> 16#e8;
from_unicode(16#00da) -> 16#e9;
from_unicode(16#00db) -> 16#ea;
from_unicode(16#00d9) -> 16#eb;
from_unicode(16#00fd) -> 16#ec;
from_unicode(16#00dd) -> 16#ed;
from_unicode(16#00af) -> 16#ee;
from_unicode(16#00b4) -> 16#ef;
from_unicode(16#00ad) -> 16#f0;
from_unicode(16#00b1) -> 16#f1;
from_unicode(16#2017) -> 16#f2;
from_unicode(16#00be) -> 16#f3;
from_unicode(16#00b6) -> 16#f4;
from_unicode(16#00a7) -> 16#f5;
from_unicode(16#00f7) -> 16#f6;
from_unicode(16#00b8) -> 16#f7;
from_unicode(16#00b0) -> 16#f8;
from_unicode(16#00a8) -> 16#f9;
from_unicode(16#00b7) -> 16#fa;
from_unicode(16#00b9) -> 16#fb;
from_unicode(16#00b3) -> 16#fc;
from_unicode(16#00b2) -> 16#fd;
from_unicode(16#25a0) -> 16#fe;
from_unicode(16#00a0) -> 16#ff;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
